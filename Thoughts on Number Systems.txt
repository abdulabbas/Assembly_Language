 Thoughts on Number Systems - 9/12/2016 

    We finished up looking at converting from decimal to binary/hexadecimal.

    We also looked at 2's complement signed integers with the following steps being done:

    1. If the number is negative, find its positive equivalent, i.e. -166 base 10 we found +166 base 10 being A6 base 10

    2. Decide how many bits we want to use to represent our numbers, remember with signed integers the leftmost bit is the sign bit, so for +166, we have to use more than 8 bits (we talked about using 9 bits but that was funky), so let's give ourselves some room with 16 bits (which is 2 bytes by the way).

    3. Find +166 base 10 as a 16 bit number, which is: 0000 0000 1010 0110 base 2

    4. Convert to 1's complement, by flipping the zeros to one, and ones to zero, which is: 1111 1111 0101 1001 base 2

    5. Last step, add binary 1 to our 1's Complement to make it our 2's complement signed integer (16 bits), we get: 1111 1111 0101 1010 base 2.

    We also introduced FIXED POINT binary numbers.

    Let's take a number such as 6.75 base 10 and convert it to binary base 2.

    Here is what our "structure" may look like:
    23 	22 	21 	20 	2-1 	2-2 	2-3 	2-4
      	  	  	. 	  	  	  	 

    The red dot in the 20 box is the binary point. For now, it is FIXED to this position (this is different than FLOATING POINT).

    1. Like with our conversion of base 10 integers to binary using the division algorithm, we convert the 6 to decimal, and place it on the left side of the binary point (remember the period for the binary point is also known as the radix point, as with base 10 decimal we call it the decimal point)

    2. Only difference is what happens on the right hand side of the binary point, rather than do division like we do with the division algorithm; we do multiplication instead for the fractional part. with this approach, we cut the zero or one on the left side of the product result and store it in the box, then the new operand for the next multiplication is the previous product result without the digit to the left of the binary point.

    3. We repeat this until all of the binary digits to the right of the binary point have been filled (we can, if we want to, do one more multiplication after we've reach the end and see if the product result has a 1 on the left side of the binary point; if it is a 1, we round up the previous digit (which is the last digit of our binary number), otherwise if 0, no rounding up).

    With the above algorithm, 6.75 base 10 would be: 0110.1100 base 2, below is how it is derived:

    1. The 6 on the left side of the radix point is 0110 (this can be verified)

    2. (0.75)(2) = 1.50, we will take the 1 on the left side of the radix point, and place it in the box for 2-1

    3. (0.50)(2) = 1.00, we take the 1.5 (without the 1 on the left side of the radix point because it was put in the box for 2-1), and multiply it by 2 again, result is 1.00; take the 1 on the left side of radix point and place in box for 2-2

    4. Since the new product result is 0, we can fill the remaining boxes ( 2-3 and 2-4 with zeros)

    Our FIXED POINT binary number is: 0110.1100

    Let's try another one, how about 75.4 as a 16 bit fixed point binary number (75 will not fit in the type with 4 bits left of radix point and 4 bits to the right - so let's do 16 bits - 8 bits to the left of radix point and 8 bits to the right)?

    1. Convert 75 base 10 to binary, we have: 01001011

    2. Now, the 0.4 part of our number...

    3. (0.4)(2) = 0.8, put the 0 in the 2-1 place, our number is looking like: 01001011.0

    4. (0.8)(2) = 1.6, put the 1 in the 2-2 place, new operand for next multiplication will be 0.6, our number is looking like: 01001011.01

    5. (0.6)(2) = 1.2, put the 1 in the 2-3 place, new operand for next multiplication will be 0.2, our number is looking like: 01001011.011

    6. (0.2)(2) = 0.4, put the 0 in the 2-4 place, new operand for next multiplication will be 0.4, our number is looking like: 01001011.0110 (*** note, we are at 0.4, just like step #3, this is going to repeat!!!)

    7. (0.4)(2) = 0.8, put the 0 in the 2-5 place, new operand for next multiplication will be 0.8, our number is looking like: 01001011.01100 (*** note, we are at 0.8, just like step #4)  

    8. (0.8)(2) = 1.6, put the 1 in the 2-6 place, new operand for next multiplication will be 0.6, our number is looking like: 01001011.011001 (*** note, we are at 0.6, just like step #5)

    9. (0.6)(2) = 1.2, put the 1 in the 2-7 place, new operand for next multiplication will be 0.2, our number is looking like: 01001011.0110011 (*** note, we are at 0.2, just like step #6)

    10. (0.2)(2) = 0.4, put the 0 in the 2-8 place, new operand for next multiplication will be 0.4, our number is looking like: 01001011.01100110 (*** note, we are at 0.8, just like step #7)

    11. Done! We have filled all 16 bits, could carry out one more multiplication to "peek" at the next bit to see if we need to round up or not. It would be (0.4)(2) = 0.8, since its a zero, no rounding up.

    Food for thought... could you write a C++ program to do this algorithm?


